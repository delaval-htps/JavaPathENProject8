buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.12")
    }
    
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"


bootJar {
    archiveBaseName = 'tourGuide'
    archiveVersion =  '1.0.0'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

sourceCompatibility = 11
targetCompatibility = 11

configurations{
    all*.exclude group:'org.springframework.boot', module:'spring-boot-starter-logging' 
}


dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")

    implementation group: 'org.javamoney', name: 'moneta', version: '1.3'
    implementation 'com.google.code.gson:gson:2.8.9'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.8'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'
    implementation 'com.google.googlejavaformat:google-java-format:1.17.0'
    implementation(name:'gpsUtil', ext:'jar')
    implementation(name:'RewardCentral', ext:'jar')
    implementation(name:'TripPricer', ext:'jar')

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.7.8'
}
test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.4"
     
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}
